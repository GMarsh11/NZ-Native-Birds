import React, { useState, useEffect, useCallback } from 'react';

// Define the spelling rules and words for each year group, extracted and refined from "Liz Kane - The Code (latest version -2022) .pdf".
const spellingRulesData = {
  'Year 1': [
    { id: 'Y1L1a', rule: "List 1a: Closed syllable VC and CVC", words: ["at", "cat", "mat", "sit", "map", "pit"] },
    { id: 'Y1L1b', rule: "List 1b: Closed syllable VC and CVC", words: ["on", "big", "dog", "hot", "top", "in"] },
    { id: 'Y1L1c', rule: "List 1c: Closed syllable VC and CVC", words: ["bed", "end", "ran", "ten", "yes", "get"] },
    { id: 'Y1L1d', rule: "List 1d: Closed syllable VC and CVC", words: ["us", "up", "but", "fun", "mum", "bus"] },
    { id: 'Y1L2', rule: "List 2: Closed syllable with digraphs (th, sh, ch, wh, ng)", words: ["then", "shop", "much", "when", "long", "with"] },
    { id: 'Y1L3', rule: "List 3: Open Syllable", words: ["be", "me", "we", "go", "so", "no"] },
    { id: 'Y1L4', rule: "List 4: Longer spelling of /k/ is -ck", words: ["duck", "rock", "back", "sick", "check", "quick"] },
    { id: 'Y1L5_s', rule: "List 5: Adding the suffix '-s'", words: ["cats", "dogs", "runs", "sits"] },
    { id: 'Y1L5_ing', rule: "List 5: Adding the suffix '-ing'", words: ["looking", "running", "hopping", "skipping"] },
  ],
  'Year 2': [
    { id: 'Y2L6a', rule: "List 6a: CCVC in one Syllable Words", words: ["plan", "swim", "frog", "clap", "drum", "grin"] },
    { id: 'Y2L6b', rule: "List 6b: CVCC in one Syllable Words", words: ["hand", "lamp", "desk", "tent", "belt", "milk"] },
    { id: 'Y2L6c', rule: "List 6c: CCVCC in one Syllable Words", words: ["clamp", "crisp", "stump", "tramp", "blimp", "frisk"] },
    { id: 'Y2L7', rule: "List 7: Floss Rule (ff, ll, ss, zz)", words: ["puff", "hill", "mess", "fizz", "tell", "pass"] },
    { id: 'Y2L8', rule: "List 8: Silent e / VCe Syllable (a_e, i_e, o_e, u_e)", words: ["make", "like", "home", "cute", "time", "rule"] },
    { id: 'Y2L9', rule: "List 9: 'c' or 'k' for /k/ sound", words: ["cat", "kit", "king", "coat", "key", "cut"] },
    { id: 'Y2L10', rule: "List 10: Vowel Teams 'ai' 'ay' (long /a/)", words: ["rain", "play", "wait", "day", "train", "say"] },
    { id: 'Y2L11', rule: "List 11: Digraph 'ph' (/f/ sound)", words: ["phone", "photo", "graph", "elephant", "dolphin", "alphabet"] },
    { id: 'Y2L12', rule: "List 12: Vowel Teams 'ou' 'ow' (/ou/ sound)", words: ["out", "cow", "loud", "now", "house", "brown"] },
    { id: 'Y2L13_s', rule: "List 13: Adding the suffix '-s'", words: ["walks", "jumps", "plays"] },
    { id: 'Y2L13_ing', rule: "List 13: Adding the suffix '-ing'", words: ["walking", "jumping", "playing"] },
    { id: 'Y2L13_ed', rule: "List 13: Adding the suffix '-ed'", words: ["walked", "jumped", "played"] },
    { id: 'Y2L14', rule: "List 14: Contractions 1", words: ["I'm", "you're", "it's", "don't", "can't", "isn't"] },
    { id: 'Y2L15', rule: "List 15: Compound Words 1", words: ["sunshine", "cupcake", "rainbow", "toothbrush", "bedroom", "popcorn"] },
    { id: 'Y2L16', rule: "List 16: Trigraph 'igh' (long /i/)", words: ["light", "night", "high", "right", "fight", "sigh"] },
    { id: 'Y2L17', rule: "List 17: Soft 'c' and Soft 'g' 1", words: ["face", "city", "gem", "magic", "cage", "large"] },
  ],
  'Year 3': [
    { id: 'Y3L18', rule: "List 18: R Controlled Syllable 'ar' and 'or'", words: ["car", "for", "farm", "short", "park", "horse"] },
    { id: 'Y3L19', rule: "List 19: Final y for long /e/ and long /i/", words: ["happy", "fly", "baby", "sky", "funny", "try"] },
    { id: 'Y3L20', rule: "List 20: Vowel Teams long /e/ 'ee' and 'ea'", words: ["tree", "read", "sleep", "team", "green", "clean"] },
    { id: 'Y3L21', rule: "List 21: Vowel Teams long /o/ 'oa' and 'ow'", words: ["boat", "snow", "road", "grow", "coat", "show"] },
    { id: 'Y3L22', rule: "List 22: Homophones 1", words: ["to/too/two", "their/there/they're", "your/you're", "by/buy/bye", "hear/here", "know/no"] },
    { id: 'Y3L23', rule: "List 23: Vowel Team 'oo' (long/short)", words: ["moon", "book", "food", "look", "spoon", "cook"] },
    { id: 'Y3L24', rule: "List 24: Compound Words 2", words: ["homework", "inside", "outside", "anything", "everyone", "playground"] },
    { id: 'Y3L25', rule: "List 25: Three letter consonant clusters", words: ["splash", "street", "strong", "scratch", "spring", "thrill"] },
    { id: 'Y3L26', rule: "List 26: Vowel Teams 'oi' and 'oy'", words: ["coin", "boy", "soil", "toy", "join", "enjoy"] },
    { id: 'Y3L27', rule: "List 27: Contractions 2", words: ["you'll", "he'll", "what's", "where's", "who's", "that's"] },
    { id: 'Y3L28_er', rule: "List 28: R Controlled Syllable 'er'", words: ["her", "fern", "teacher"] },
    { id: 'Y3L28_ir', rule: "List 28: R Controlled Syllable 'ir'", words: ["bird", "shirt", "girl"] },
    { id: 'Y3L28_ur', rule: "List 28: R Controlled Syllable 'ur'", words: ["fur", "burn", "turn"] },
    { id: 'Y3L29', rule: "List 29: Syllable Division - Trumpet Rule (VCCV)", words: ["trumpet", "rabbit", "muffin", "kitten", "button", "lesson"] },
    { id: 'Y3L30', rule: "List 30: Schwa Vowel 1", words: ["about", "banana", "sofa", "again", "camera", "problem"] },
    { id: 'Y3L31', rule: "List 31: Prefix 'un-'", words: ["unhappy", "undo", "unpack", "unfold", "uncover", "unlucky"] },
    { id: 'Y3L32_ly', rule: "List 32: Suffix '-ly'", words: ["quickly", "happily", "slowly"] },
    { id: 'Y3L32_er', rule: "List 32: Suffix '-er'", words: ["faster", "teacher", "bigger"] },
    { id: 'Y3L32_est', rule: "List 32: Suffix '-est'", words: ["tallest", "biggest", "longest"] },
    { id: 'Y3L33', rule: "List 33: Trigraph 'tch'", words: ["catch", "watch", "match", "ditch", "witch", "scratch"] },
  ],
  'Year 4': [
    { id: 'Y4L34a_long_e', rule: "List 34a: 'ea' as long /e/", words: ["read", "team"] },
    { id: 'Y4L34a_short_e', rule: "List 34a: 'ea' as short /e/", words: ["bread", "head"] },
    { id: 'Y4L34a_long_a', rule: "List 34a: 'ea' as long /a/", words: ["great", "break"] },
    { id: 'Y4L34b', rule: "List 34b: Vowel Team long /e/ 'ey'", words: ["key", "money", "monkey", "valley", "donkey", "journey"] },
    { id: 'Y4L34c', rule: "List 34c: Vowel Team long /i/ 'ie'", words: ["pie", "tie", "lie", "cried", "tried", "flies"] },
    { id: 'Y4L34d', rule: "List 34d: Vowel Team long /o/ 'oe'", words: ["toe", "hoe", "goes", "heroes", "potatoes", "tomatoes"] },
    { id: 'Y4L34e', rule: "List 34e: Vowel Team long /u/ 'ew'", words: ["new", "few", "chew", "stew", "crew", "flew"] },
    { id: 'Y4L35', rule: "List 35: Homophones 2", words: ["knight/night", "mail/male", "meat/meet", "one/won", "peace/piece", "read/red"] },
    { id: 'Y4L36', rule: "List 36: Vowel Teams 'au' 'aw' for /or/", words: ["caught", "saw", "autumn", "draw", "taught", "paw"] },
    { id: 'Y4L37', rule: "List 37: Trigraph 'dge'", words: ["badge", "judge", "hedge", "edge", "lodge", "bridge"] },
    { id: 'Y4L38', rule: "List 38: Vowel Teams 'ew' 'ue' for /oo/", words: ["flew", "blue", "grew", "true", "chew", "clue"] },
    { id: 'Y4L39', rule: "List 39: Syllable Division Tiger Rule (VCV)", words: ["tiger", "pilot", "silent", "robot", "music", "paper"] },
    { id: 'Y4L40', rule: "List 40: CVC Doubling Rule", words: ["running", "hopping", "bigger", "swimming", "stopping", "cutting"] },
    { id: 'Y4L41_re', rule: "List 41: Prefix 're-'", words: ["redo", "return", "rebuild"] },
    { id: 'Y4L41_dis', rule: "List 41: Prefix 'dis-'", words: ["dislike", "disagree", "disappear"] },
    { id: 'Y4L42', rule: "List 42: Syllable Division Camel Rule (VCCV)", words: ["camel", "rabbit", "muffin", "button", "dinner", "lesson"] },
    { id: 'Y4L43_ful', rule: "List 43: Suffix '-ful'", words: ["careful", "helpful", "joyful"] },
    { id: 'Y4L43_less', rule: "List 43: Suffix '-less'", words: ["careless", "helpless", "joyless"] },
    { id: 'Y4L44', rule: "List 44: Silent e plus Suffix Rule", words: ["baking", "safely", "making", "nicely", "riding", "bravely"] },
    { id: 'Y4L45', rule: "List 45: Consonant-le Syllable", words: ["table", "apple", "little", "purple", "candle", "simple"] },
  ],
  'Year 5/6': [
    { id: 'Y5L46a', rule: "List 46a: Long /a/ 'eigh'", words: ["eight", "sleigh", "weigh", "freight", "neighbor", "straight"] },
    { id: 'Y5L46b', rule: "List 46b: Vowel Team Long /e/ 'ie'", words: ["field", "chief", "belief", "piece", "relieve", "achieve"] },
    { id: 'Y5L46c_long_o', rule: "List 46c: 'ough' as long /o/", words: ["though", "although", "dough"] },
    { id: 'Y5L46c_or', rule: "List 46c: 'ough' as /or/", words: ["fought", "bought", "brought", "thought"] },
    { id: 'Y5L46c_ow', rule: "List 46c: 'ough' as /ow/ as in plough", words: ["plough", "bough", "drought", "slough"] },
    { id: 'Y5L46d', rule: "List 46d: Vowel Team Long /u/ 'ue'", words: ["blue", "true", "clue", "rescue", "value", "argue"] },
    { id: 'Y5L47', rule: "List 47: Soft 'c' and Soft 'g' 2", words: ["juice", "citizen", "giraffe", "danger", "decide", "message"] },
    { id: 'Y5L48', rule: "List 48: Homophones 3", words: ["aisle/isle", "allowed/aloud", "board/bored", "coarse/course", "compliment/complement", "council/counsel"] },
    { id: 'Y5L49_semi', rule: "List 49: Prefix 'semi-'", words: ["semicircle", "semifinal"] },
    { id: 'Y5L49_sub', rule: "List 49: Prefix 'sub-'", words: ["submarine", "subway"] },
    { id: 'Y5L49_mis', rule: "List 49: Prefix 'mis-'", words: ["mistake", "misplace"] },
    { id: 'Y5L49_multi', rule: "List 49: Prefix 'multi-'", words: ["multiply", "multimedia"] },
    { id: 'Y5L49_pre', rule: "List 49: Prefix 'pre-'", words: ["preview", "prepare"] },
    { id: 'Y5L50', rule: "List 50: Contractions 3", words: ["who'd", "what's", "where's", "that's", "there's", "he'll"] },
    { id: 'Y5L51_air', rule: "List 51: 'air' spelling", words: ["air", "chair"] },
    { id: 'Y5L51_are', rule: "List 51: 'are' spelling", words: ["care", "share"] },
    { id: 'Y5L51_ear', rule: "List 51: 'ear' spelling", words: ["bear", "wear"] },
    { id: 'Y5L52', rule: "List 52: Y Rule - Keep it or Change it", words: ["happier", "playing", "cities", "carried", "enjoying", "studies"] },
    { id: 'Y5L53_tion', rule: "List 53: Suffix '-tion'", words: ["action", "station", "fiction"] },
    { id: 'Y5L53_sion', rule: "List 53: Suffix '-sion'", words: ["tension", "vision", "explosion"] },
    { id: 'Y5L53_cian', rule: "List 53: Suffix '-cian'", words: ["musician", "magician", "electrician"] },
    { id: 'Y5L54_wr', rule: "List 54: Silent 'w' in 'wr'", displaySound: 'wr', words: ["write", "wrong", "wrap", "wrist"] },
    { id: 'Y5L54_kn', rule: "List 54: Silent 'k' in 'kn'", displaySound: 'kn', words: ["know", "knife", "knee", "knock"] },
    { id: 'Y5L54_sc', rule: "List 54: Silent 'c' in 'sc'", displaySound: 'sc', words: ["science", "scene", "scissors", "muscle"] },
    { id: 'Y5L54_mb', rule: "List 54: Silent 'b' in 'mb'", displaySound: 'mb', words: ["comb", "thumb", "lamb", "climb"] },
    { id: 'Y5L55', rule: "List 55: Schwa Vowel 2", words: ["family", "animal", "camera", "banana", "problem", "system"] },
    { id: 'Y5L56', rule: "List 56: Plural of words ending in 'f' or 'fe'", words: ["wolves", "knives", "leaves", "lives", "halves", "shelves"] },
  ],
  'Year 7/8': [
    { id: 'Y7L57a', rule: "List 57a: Vowel Team Long /a/ ei", words: ["veil", "vein", "weigh", "beige", "feign", "reign"] },
    { id: 'Y7L57b', rule: "List 57b: Vowel Team Long /e/ 'ei'", words: ["receive", "deceive", "conceive", "ceiling", "seize", "weird"] },
    { id: 'Y7L58', rule: "List 58: Vowel Team 'ou' as short /u/", words: ["young", "rough", "tough", "enough", "country", "cousin"] },
    { id: 'Y7L59_gh_f', rule: "List 59: 'gh' as /f/", words: ["rough", "tough", "cough"] },
    { id: 'Y7L59_ph_f', rule: "List 59: 'ph' as /f/", words: ["phone", "photo", "graph"] },
    { id: 'Y7L60', rule: "List 60: Letter 'a' as short /o/", words: ["was", "want", "watch", "squash", "quality", "water"] },
    { id: 'Y7L61_trans', rule: "List 61: Prefix 'trans-'", words: ["transport", "transfer"] },
    { id: 'Y7L61_non', rule: "List 61: Prefix 'non-'", words: ["nonfiction", "nonsense"] },
    { id: 'Y7L61_fore', rule: "List 61: Prefix 'fore-'", words: ["foretell", "forecast"] },
    { id: 'Y7L61_inter', rule: "List 61: Prefix 'inter-'", words: ["international", "interact"] },
    { id: 'Y7L61_over', rule: "List 61: Prefix 'over-'", words: ["overcoat", "overcome"] },
    { id: 'Y7L62_ch_ch', rule: "List 62: 'ch' as /ch/", words: ["chair", "much"] },
    { id: 'Y7L62_ch_k', rule: "List 62: 'ch' as /k/", words: ["school", "stomach"] },
    { id: 'Y7L62_ch_sh', rule: "List 62: 'ch' as /sh/", words: ["chef", "machine"] },
    { id: 'Y7L63', rule: "List 63: 'or' as /er/ in worm", words: ["worm", "work", "word", "world", "worse", "worth"] },
    { id: 'Y7L64', rule: "List 64: Plurals with irregular spellings", words: ["children", "men", "feet", "mice", "oxen", "sheep"] },
    { id: 'Y7L65_gn_n', rule: "List 65: 'gn' as /n/", words: ["gnaw", "sign", "gnome", "design"] },
    { id: 'Y7L65_gh_g', rule: "List 65: 'gh' as /g/", words: ["ghost", "ghastly"] },
    { id: 'Y7L66', rule: "List 66: Latin and Greek root words", words: ["audience", "transport", "biology", "geology", "photograph", "telephone"] },
    { id: 'Y7L67_uni', rule: "List 67: Prefix 'uni-'", words: ["unicorn", "unicycle"] },
    { id: 'Y7L67_bi', rule: "List 67: Prefix 'bi-'", words: ["bicycle", "bilingual"] },
    { id: 'Y7L67_tri', rule: "List 67: Prefix 'tri-'", words: ["triangle", "tripod"] },
    { id: 'Y7L68_able', rule: "List 68: Suffix '-able'", words: ["enjoyable", "readable", "lovable"] },
    { id: 'Y7L68_ible', rule: "List 68: Suffix '-ible'", words: ["sensible", "possible", "terrible"] },
    { id: 'Y7L69', rule: "List 69: Suffix '-ure'", words: ["picture", "future", "capture", "adventure", "feature", "mixture"] },
  ],
};

// Utility function to shuffle an array
const shuffleArray = (array) => {
  let currentIndex = array.length, randomIndex;
  while (currentIndex !== 0) {
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex], array[currentIndex]];
  }
  return array;
};

// Function to extract the sound rule (e.g., 'ea', 'ey') from rule object
const extractSoundRule = (rule) => {
  if (rule.displaySound) {
    return rule.displaySound;
  }
  const match = rule.rule.match(/'([^']+)'/); // Matches content inside single quotes
  return match ? match[1] : null; // Return the captured group (the content inside quotes)
};

const App = () => {
  const [selectedYear, setSelectedYear] = useState('');
  const [availableRules, setAvailableRules] = useState([]);
  const [selectedRuleIds, setSelectedRuleIds] = useState({});
  const [shuffledRulesToDisplay, setShuffledRulesToDisplay] = useState([]);
  const [currentRuleIndex, setCurrentRuleIndex] = useState(0);
  const [generatedSentences, setGeneratedSentences] = useState(null);
  const [loadingSentences, setLoadingSentences] = useState(false); // New loading state

  // Declare currentRule, hasSelectedRules, and currentDisplaySound here
  const currentRule = shuffledRulesToDisplay[currentRuleIndex];
  const hasSelectedRules = Object.values(selectedRuleIds).some(isSelected => isSelected);
  const currentDisplaySound = currentRule ? extractSoundRule(currentRule) : null;

  // Effect to update available rules and reset selections when year changes
  useEffect(() => {
    if (selectedYear) {
      const rulesForYear = spellingRulesData[selectedYear] || [];
      setAvailableRules(rulesForYear);
      const initialSelected = rulesForYear.reduce((acc, rule) => {
        acc[rule.id] = false;
        return acc;
      }, {});
      setSelectedRuleIds(initialSelected);
      setShuffledRulesToDisplay([]);
      setCurrentRuleIndex(0);
      setGeneratedSentences(null); // Clear sentences on year change
    } else {
      setAvailableRules([]);
      setSelectedRuleIds({});
      setShuffledRulesToDisplay([]);
      setCurrentRuleIndex(0);
      setGeneratedSentences(null);
    }
  }, [selectedYear]);

  // Effect to update shuffled rules when selected rules change
  useEffect(() => {
    const rulesToInclude = availableRules.filter(rule => selectedRuleIds[rule.id]);
    setShuffledRulesToDisplay(shuffleArray([...rulesToInclude]));
    setCurrentRuleIndex(0);
    setGeneratedSentences(null); // Clear sentences when selected rules change
  }, [selectedRuleIds, availableRules]);

  // Handler for year dropdown change
  const handleYearChange = (e) => {
    setSelectedYear(e.target.value);
  };

  // Handler for individual rule checkbox change
  const handleRuleToggle = (ruleId) => {
    setSelectedRuleIds(prev => ({
      ...prev,
      [ruleId]: !prev[ruleId]
    }));
  };

  // Function to display the next rule
  const showNextRule = useCallback(() => {
    if (shuffledRulesToDisplay.length === 0) return;
    setCurrentRuleIndex((prevIndex) => (prevIndex + 1) % shuffledRulesToDisplay.length);
    setGeneratedSentences(null); // Clear sentences when moving to next rule
  }, [shuffledRulesToDisplay.length]);

  // Function to generate practice sentences using Gemini API
  const generatePracticeSentences = useCallback(async () => {
    if (!currentRule || shuffledRulesToDisplay.length === 0) {
      setGeneratedSentences(null);
      return;
    }

    setLoadingSentences(true);
    setGeneratedSentences(null); // Clear previous sentences

    try {
      const mainRuleWords = currentRule.words.join(', ');
      const otherSelectedWords = shuffledRulesToDisplay
        .filter(rule => rule.id !== currentRule.id && rule.words && rule.words.length > 0)
        .map(rule => rule.words.join(', '))
        .join(', ');

      const prompt = `Generate three practice sentences for a spelling exercise.
        The sentences should incorporate words from the primary spelling rule: "${currentRule.rule}" (words: ${mainRuleWords}).
        Additionally, try to blend in words from other selected spelling rules from the same year group (other words available: ${otherSelectedWords}).
        The sentences should increase in difficulty:
        1. Mild: A simple sentence.
        2. Medium: A compound sentence.
        3. Spicy: A complex sentence.
        Ensure all sentences are grammatically correct and make sense.
        Provide the output as a JSON object with keys "mild", "medium", and "spicy".`;

      let chatHistory = [];
      chatHistory.push({ role: "user", parts: [{ text: prompt }] });

      const payload = {
        contents: chatHistory,
        generationConfig: {
          responseMimeType: "application/json",
          responseSchema: {
            type: "OBJECT",
            properties: {
              mild: { type: "STRING" },
              medium: { type: "STRING" },
              spicy: { type: "STRING" }
            },
            propertyOrdering: ["mild", "medium", "spicy"]
          }
        }
      };

      const apiKey = ""; // Canvas will automatically provide the API key
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        const jsonText = result.candidates[0].content.parts[0].text;
        const parsedJson = JSON.parse(jsonText);
        setGeneratedSentences(parsedJson);
      } else {
        console.error("Gemini API response structure unexpected:", result);
        setGeneratedSentences({
          mild: "Could not generate mild sentence.",
          medium: "Could not generate medium sentence.",
          spicy: "Could not generate spicy sentence."
        });
      }
    } catch (error) {
      console.error("Error generating sentences:", error);
      setGeneratedSentences({
        mild: "Error generating mild sentence.",
        medium: "Error generating medium sentence.",
        spicy: "Error generating spicy sentence."
      });
    } finally {
      setLoadingSentences(false);
    }
  }, [currentRule, shuffledRulesToDisplay]);


  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 to-purple-200 flex flex-col items-center justify-center p-4"
         style={{ fontFamily: "'Edu NSW ACT Foundation', cursive" }}>
      {/* Google Fonts Import for Edu NSW ACT Foundation and Edu Australia VIC WA NT Hand Guides
          These link tags should ideally be in the <head> of your public/index.html file
          to avoid React errors and ensure fonts load correctly across the application. */}

      <div className="bg-white p-8 rounded-2xl shadow-xl max-w-2xl w-full text-center">
        <h1 className="text-4xl font-extrabold text-gray-800 mb-8">
          Spelling Rule Shuffler
        </h1>

        {/* Year Selector - Dropdown Menu */}
        <div className="mb-8">
          <h2 className="text-2xl font-semibold text-gray-700 mb-4">Select Year Group:</h2>
          <select
            value={selectedYear}
            onChange={handleYearChange}
            className="px-6 py-3 rounded-full text-lg font-medium bg-gray-200 text-gray-700
                       focus:outline-none focus:ring-4 focus:ring-blue-400 focus:ring-opacity-75
                       transition-all duration-300 ease-in-out cursor-pointer appearance-none pr-8"
            style={{
              backgroundImage: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='currentColor'%3E%3Cpath fillRule='evenodd' d='M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z' clipRule='evenodd'%3E%3C/path%3E%3C/svg%3E")`,
              backgroundRepeat: 'no-repeat',
              backgroundPosition: 'right 0.75rem center',
              backgroundSize: '1.5em 1.5em',
            }}
          >
            <option value="">-- Select a Year --</option>
            {Object.keys(spellingRulesData).map((year) => (
              <option key={year} value={year}>
                {year}
              </option>
            ))}
          </select>
        </div>

        {/* Rule Selection List */}
        {selectedYear && availableRules.length > 0 && (
          <div className="mb-8 p-6 bg-purple-50 rounded-xl border-2 border-purple-200 shadow-inner text-left">
            <h2 className="text-2xl font-semibold text-purple-800 mb-4">Select Rules for {selectedYear}:</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
              {availableRules.map((rule) => (
                <label key={rule.id} className="flex items-center space-x-2 cursor-pointer p-2 rounded-lg hover:bg-purple-100 transition-colors duration-200">
                  <input
                    type="checkbox"
                    checked={selectedRuleIds[rule.id] || false}
                    onChange={() => handleRuleToggle(rule.id)}
                    className="form-checkbox h-5 w-5 text-purple-600 rounded focus:ring-purple-500"
                  />
                  <span className="text-lg text-gray-800 font-medium">{rule.rule}</span>
                </label>
              ))}
            </div>
          </div>
        )}

        {/* Rule Display Area */}
        {hasSelectedRules && currentRule ? (
          <div className="mb-8 p-6 bg-blue-50 rounded-xl border-2 border-blue-200 shadow-inner">
            {/* Sound Rule Display Card (e.g., 'ea', 'ey', 'wr', 'kn') */}
            {currentDisplaySound && (
              <div className="bg-yellow-200 text-yellow-900 p-6 rounded-lg shadow-md mb-6 border-2 border-yellow-300">
                <p className="text-6xl font-extrabold text-center" style={{ fontFamily: "'Edu NSW ACT Foundation', cursive" }}>{currentDisplaySound}</p>
              </div>
            )}

            {/* Enlarged and bold spelling rule heading in a soft red box */}
            <div className="bg-red-100 text-red-800 p-4 rounded-lg shadow-md mb-6">
              <h3 className="text-4xl font-extrabold">
                {currentRule.rule}
              </h3>
            </div>
            <div className="flex flex-wrap justify-center gap-4 p-4 bg-white rounded-lg border border-gray-300 shadow-md">
              {currentRule.words.map((word, index) => (
                <div
                  key={index}
                  // Enlarged text, black color, simple font, and clear separation
                  className="px-6 py-3 bg-indigo-100 text-black text-4xl font-normal rounded-lg shadow-sm
                             border border-indigo-200 flex items-center justify-center min-w-[120px]"
                  style={{ fontFamily: "'Edu NSW ACT Foundation', cursive" }}
                >
                  {word}
                </div>
              ))}
            </div>
          </div>
        ) : selectedYear && availableRules.length > 0 && !hasSelectedRules ? (
          <p className="text-xl text-gray-600 mt-8">Please select at least one rule to start the randomizer.</p>
        ) : (
          <p className="text-xl text-gray-600 mt-8">Select a year group to view and select spelling rules.</p>
        )}

        {/* Next Rule Button */}
        {shuffledRulesToDisplay.length > 0 && (
          <button
            onClick={showNextRule}
            className="px-8 py-4 bg-green-500 text-white text-xl font-bold rounded-full shadow-lg
                       hover:bg-green-600 transform hover:scale-105 transition-all duration-300 ease-in-out
                       focus:outline-none focus:ring-4 focus:ring-green-400 focus:ring-opacity-75
                       flex items-center justify-center mx-auto"
          >
            Next Rule
            <svg className="ml-2 w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
            </svg>
          </button>
        )}

        {/* Sentence Generation Section */}
        {currentRule && hasSelectedRules && (
          <div className="mt-12 p-8 bg-pink-50 rounded-2xl shadow-xl border-2 border-pink-200 text-left"
               style={{ fontFamily: "'Edu Australia VIC WA NT Hand Gothic', cursive" }}> {/* Apply font here */}
            <h2 className="text-3xl font-extrabold text-pink-800 mb-6 text-center">Practice Sentences</h2>

            <button
              onClick={generatePracticeSentences}
              disabled={loadingSentences} // Disable button while loading
              className={`mb-6 px-6 py-3 text-white text-lg font-bold rounded-full shadow-md
                         ${loadingSentences ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600 transform hover:scale-105'}
                         transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-blue-400 focus:ring-opacity-75 flex items-center justify-center mx-auto`}
            >
              {loadingSentences ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Generating...
                </>
              ) : (
                <>
                  Generate Sentences
                  <svg className="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                </>
              )}
            </button>

            {generatedSentences ? (
              <div> {/* No inline style here, inherits from parent */}
                <div className="mb-4 p-4 bg-white rounded-lg shadow-sm border border-gray-300">
                  <p className="text-2xl font-semibold text-gray-700 mb-2">Mild:</p>
                  <p className="text-3xl text-gray-900">{generatedSentences.mild}</p>
                </div>
                <div className="mb-4 p-4 bg-white rounded-lg shadow-sm border border-gray-300">
                  <p className="text-2xl font-semibold text-gray-700 mb-2">Medium:</p>
                  <p className="text-3xl text-gray-900">{generatedSentences.medium}</p>
                </div>
                <div className="p-4 bg-white rounded-lg shadow-sm border border-gray-300">
                  <p className="text-2xl font-semibold text-gray-700 mb-2">Spicy:</p>
                  <p className="text-3xl text-gray-900">{generatedSentences.spicy}</p>
                </div>
              </div>
            ) : (
              <p className="text-xl text-gray-600 text-center">Click "Generate Sentences" to get practice sentences.</p>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
